// ‚öôÔ∏è CONTR√îLE FONCTIONNALIT√âS - Cynthia d√©cide ce qui est ON/OFF
// Chaque API peut √™tre activ√©e/d√©sactiv√©e ind√©pendamment

class FeaturesControl {
    constructor() {
        // √âtat par d√©faut : TOUT OFF (mode manuel)
        this.defaultConfig = {
            // API #1 - CYNTHIA_ASSISTANT
            ia_analysis: false,           // IA analyse fiches
            auto_email: false,            // Emails automatiques  
            photo_optimization: false,    // Optimisation photos auto
            form_processing: true,        // Traitement formulaires (toujours ON)
            
            // API #2 - CYNTHIA_WEBAPP  
            public_website: false,        // Site web public
            auto_advertising: false,      // Publicit√©s automatiques
            social_posting: false,        // Posts r√©seaux sociaux auto
            analytics_tracking: false,   // Suivi analytics
            
            // Fonctions de base (toujours disponibles)
            manual_mode: true,            // Mode manuel
            contact_forms: true,          // Formulaires contact
            data_storage: true,           // Sauvegarde donn√©es
            
            // M√©tadonn√©es
            last_updated: new Date().toISOString(),
            configured_by: "Cynthia Bernier - Lebel-sur-Qu√©villon"
        };
        
        this.loadConfig();
    }
    
    loadConfig() {
        try {
            // Charger config depuis stockage local
            const saved = localStorage.getItem('cynthia_features_config');
            this.config = saved ? JSON.parse(saved) : { ...this.defaultConfig };
            
            console.log('‚öôÔ∏è Configuration fonctionnalit√©s charg√©e:', this.config);
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur chargement config, utilisation par d√©faut');
            this.config = { ...this.defaultConfig };
        }
    }
    
    saveConfig() {
        try {
            this.config.last_updated = new Date().toISOString();
            localStorage.setItem('cynthia_features_config', JSON.stringify(this.config));
            console.log('‚úÖ Configuration sauvegard√©e');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur sauvegarde config:', error);
            return false;
        }
    }
    
    // V√©rifier si fonctionnalit√© est activ√©e
    isEnabled(feature) {
        return this.config[feature] === true;
    }
    
    // Activer/d√©sactiver fonctionnalit√©
    toggle(feature) {
        if (this.config.hasOwnProperty(feature)) {
            this.config[feature] = !this.config[feature];
            this.saveConfig();
            
            console.log(`üéõÔ∏è ${feature} ${this.config[feature] ? 'ACTIV√â' : 'D√âSACTIV√â'}`);
            return true;
        }
        return false;
    }
    
    // Activer fonctionnalit√©
    enable(feature) {
        if (this.config.hasOwnProperty(feature)) {
            this.config[feature] = true;
            this.saveConfig();
            console.log(`‚úÖ ${feature} ACTIV√â`);
            return true;
        }
        return false;
    }
    
    // D√©sactiver fonctionnalit√©  
    disable(feature) {
        if (this.config.hasOwnProperty(feature)) {
            this.config[feature] = false;
            this.saveConfig();
            console.log(`üî¥ ${feature} D√âSACTIV√â`);
            return true;
        }
        return false;
    }
    
    // Obtenir √©tat complet
    getStatus() {
        return {
            api1_status: {
                ia_analysis: this.config.ia_analysis,
                auto_email: this.config.auto_email,
                photo_optimization: this.config.photo_optimization,
                form_processing: this.config.form_processing
            },
            api2_status: {
                public_website: this.config.public_website,
                auto_advertising: this.config.auto_advertising,
                social_posting: this.config.social_posting,
                analytics_tracking: this.config.analytics_tracking
            },
            manual_mode: this.config.manual_mode,
            last_updated: this.config.last_updated
        };
    }
    
    // Mode d'urgence : tout d√©sactiver sauf essentiel
    emergencyMode() {
        const essentials = ['form_processing', 'contact_forms', 'data_storage', 'manual_mode'];
        
        Object.keys(this.config).forEach(feature => {
            if (!essentials.includes(feature) && typeof this.config[feature] === 'boolean') {
                this.config[feature] = false;
            }
        });
        
        this.saveConfig();
        console.log('üö® MODE URGENCE ACTIV√â - Seules fonctions essentielles actives');
        
        return this.getStatus();
    }
    
    // Restaurer configuration par d√©faut
    resetToDefault() {
        const confirm = window.confirm(`
‚ö†Ô∏è RESTAURER CONFIGURATION PAR D√âFAUT

Ceci va remettre toutes les fonctionnalit√©s en mode OFF.
Vous pourrez les r√©activer une par une selon vos besoins.

Continuer ?
        `);
        
        if (confirm) {
            this.config = { ...this.defaultConfig };
            this.saveConfig();
            console.log('üîÑ Configuration restaur√©e par d√©faut');
            return true;
        }
        
        return false;
    }
}

// Instance globale
window.FeaturesControl = new FeaturesControl();

// Export pour modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FeaturesControl;
}